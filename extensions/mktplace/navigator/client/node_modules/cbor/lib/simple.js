// Generated by CoffeeScript 1.10.0
(function() {
  var MT, SIMPLE, SYMS, Simple, ref;

  ref = require('./constants'), MT = ref.MT, SIMPLE = ref.SIMPLE, SYMS = ref.SYMS;

  Simple = (function() {
    function Simple(value) {
      var ref1;
      this.value = value;
      if (typeof this.value !== 'number') {
        throw new Error("Invalid Simple type: " + (typeof this.value));
      }
      if (!(((0 <= (ref1 = this.value) && ref1 < 256)) && ((this.value | 0) === this.value))) {
        throw new Error("value must be a small positive integer: " + this.value);
      }
    }

    Simple.prototype.toString = function() {
      return "simple(" + this.value + ")";
    };

    Simple.prototype.inspect = function(depth, opts) {
      return "simple(" + this.value + ")";
    };

    Simple.prototype.encodeCBOR = function(gen) {
      return gen._pushInt(this.value, MT.SIMPLE_FLOAT);
    };

    Simple.isSimple = function(obj) {
      return obj instanceof Simple;
    };

    Simple.decode = function(val, has_parent) {
      if (has_parent == null) {
        has_parent = true;
      }
      switch (val) {
        case SIMPLE.FALSE:
          return false;
        case SIMPLE.TRUE:
          return true;
        case SIMPLE.NULL:
          if (has_parent) {
            return null;
          } else {
            return SYMS.NULL;
          }
        case SIMPLE.UNDEFINED:
          if (has_parent) {
            return void 0;
          } else {
            return SYMS.UNDEFINED;
          }
        case -1:
          if (!has_parent) {
            throw new Error('Invalid BREAK');
          }
          return SYMS.BREAK;
        default:
          return new Simple(val);
      }
    };

    return Simple;

  })();

  module.exports = Simple;

}).call(this);

//# sourceMappingURL=simple.js.map
